{"version":3,"sources":["models/WatchModel.jsx","components/AddForm.jsx","components/WatchItem.jsx","components/WatchList.jsx","App.js","reportWebVitals.js","index.js"],"names":["WatchModel","city","offset","id","this","AddForm","handleAdd","useState","form","setForm","handleChange","event","target","name","value","prevForm","className","onSubmit","preventDefault","watch","shortid","generate","htmlFor","type","onChange","required","step","min","max","WatchItem","currentUTC","handleDelete","utcOffset","Number","format","onClick","WatchList","watches","map","App","loadTime","setInterval","setState","moment","utc","prevState","filter","state","clearInterval","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a229c2fc.chunk.js","sourcesContent":["export default class WatchModel {\n    constructor(city, offset, id) {\n      this.city = city;\n      this.offset = offset;\n      this.id = id;\n    }\n  }\n  ","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport shortid from \"shortid\";\nimport WatchModel from \"../models/WatchModel\";\n\nconst AddForm = ({ handleAdd }) => {\n  const [form, setForm] = useState({ city: \"\", offset: \"\" });\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const watch = new WatchModel(form.city, form.offset, shortid.generate());\n    handleAdd(watch);\n    setForm({ city: \"\", offset: \"\" });\n  };\n  return (\n    <form className=\"ui form\" onSubmit={handleSubmit}>\n      <div className=\"two fields\">\n        <div className=\"field\">\n          <label htmlFor=\"city\">Название</label>\n          <div className=\"ui input left icon\">\n            <input\n              type=\"text\"\n              id=\"city\"\n              name=\"city\"\n              value={form.city}\n              onChange={handleChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label htmlFor=\"distance\">Временная зона</label>\n          <input\n            type=\"number\"\n            step={1}\n            min={-12}\n            max={+14}\n            name=\"offset\"\n            id=\"offset\"\n            value={form.offset}\n            onChange={handleChange}\n            required\n          />\n        </div>\n      </div>\n      <button className=\"ui green button\" type=\"submit\">\n        Добавить\n      </button>\n    </form>\n  );\n};\n\nAddForm.propTypes = {\n  handleAdd: PropTypes.func.isRequired\n};\n\nexport default AddForm;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst WatchItem = ({ watch, currentUTC, handleDelete }) => {\n  return (\n    <div className=\"eight wide column\">\n      <div className=\"ui segment\">\n        <p>\n          <b>{watch.city}</b>\n        </p>\n        <p>{currentUTC.utcOffset(Number(watch.offset)).format(\"kk:mm:ss\")}</p>\n        <button onClick={() => handleDelete(watch.id)}>\n          <i className=\"times red icon\"></i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nWatchItem.propTypes = {\n  watch: PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    offset: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired\n  }),\n  currentUTC: PropTypes.object,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default WatchItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport WatchItem from \"./WatchItem\";\n\nconst WatchList = ({ watches, currentUTC, handleDelete }) => {\n  return (\n    <div className=\"ui basic segment\">\n      <div className=\"ui grid\">\n        {watches.map(watch => (\n          <WatchItem\n            key={watch.id}\n            watch={watch}\n            currentUTC={currentUTC}\n            handleDelete={handleDelete}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nWatchList.propTypes = {\n  watches: PropTypes.arrayOf(\n    PropTypes.shape({\n      city: PropTypes.string.isRequired,\n      offset: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired\n    })\n  ).isRequired,\n  currentUTC: PropTypes.object,\n  handleDelete: PropTypes.func.isRequired\n};\n\nexport default WatchList;\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\nimport AddForm from \"./components/AddForm\";\nimport WatchList from \"./components/WatchList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      watches: [],\n      currentUTC: null\n    };\n  }\n\n  componentDidMount() {\n    this.loadTime();\n  }\n\n  loadTime = () => {\n    setInterval(() => {\n      this.setState({\n        currentUTC: moment().utc()\n      });\n    }, 1000);\n  };\n\n  handleAdd = watch => {\n    this.setState(prevState => ({\n      watches: [...prevState.watches, watch]\n    }));\n  };\n\n  handleDelete = id => {\n    this.setState(prevState => ({\n      watches: prevState.watches.filter(watch => watch.id !== id)\n    }));\n  };\n\n  componentWillUnmount() {\n    clearInterval(this.loadTime);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"ui container segment\">\n          <AddForm handleAdd={this.handleAdd} />\n          <WatchList\n            watches={this.state.watches}\n            currentUTC={this.state.currentUTC}\n            handleDelete={this.handleDelete}\n          />\n        </div>\n        <p>learn react</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}